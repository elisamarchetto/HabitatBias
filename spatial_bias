library(tidyverse)
library(spatstat) 
library(terra)
library(sf)
library(spatstat.explore)

d_ESY3_E75 <- readRDS("d_ESY3_E75.rds")
d_ESY3_G75 <- readRDS("d_ESY3_G75.rds")

r<-rast("U2018_CLC2012_V2020_20u1.tif")

e <- ext( 1909258, 7088873, 1126797, 6859958)
r<- crop(r, e)

yG <- subst(r, c(16, 17, 23, 24, 25, 28),  c(16, 17, 23, 24, 25, 28),others=NA)
yE <- subst(r, c(11, 10, 18, 26, 27, 28, 29, 30),  c(11, 10, 18, 26, 27, 28, 29, 30),others=NA)

writeRaster(yG, "yG.tif")
writeRaster(yE, "yE.tif")

yG <- rast("yG.tif")

freq <- function(x) {
    if (sum(is.na(x)) >= 0.75 * length(x)) {
        return(NA)
    } else {
        return(median(x, na.rm = TRUE))
    }
 }

yGe75_10 <- aggregate(yG, fact=100, fun = freq) 
yGe75_10v <- as.polygons(yGe75_10, value=FALSE, dissolve=FALSE)
yGev.sf <- st_as_sf(yGe75_10v)
yGev.sf <- st_make_valid(yGev.sf)
yGev.sf$lyr.1 <- rownames(yGev.sf)

#yEe75_10 <- rast("yEe75_10.tif")

yEe75_10 <- aggregate(yE, fact=100, fun = freq) 
yEe75_10v <- as.polygons(yEe75_10, value=FALSE, dissolve=FALSE)
yEev.sf <- st_as_sf(yEe75_10v)
yEev.sf <- st_make_valid(yEev.sf)
yEev.sf$lyr.1 <- rownames(yEev.sf)


#####################################
#####################################

#LEVEL 1

d_ESY3_Es <- d_ESY3_E75 %>%
  filter(ESY3=="E")%>%
  dplyr::select(X, Y, id)%>%
  drop_na()%>%
  unique()%>%
  st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))

  
d_ESY3_Gs <- d_ESY3_G75 %>%
  filter(ESY3=="G")%>%
  dplyr::select(X, Y, id)%>%
  drop_na()%>%
  unique()%>%
  st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))

#LEVEL 1 E

idE <- d_ESY3_E75 %>% dplyr::select(id)%>% drop_na()

spE <- st_intersects(yEev.sf, d_ESY3_Es)
resE <- purrr::map_depth(spE, 1, ~ifelse(is.null(.x), NA, .x) )


OV_l <- unlist(resE)

# geometric selection of the grids that overlaied the plots then, transformation in bbox

d_ESY3_E_ov <- cbind(yEev.sf, id=OV_l)%>%drop_na()%>%dplyr::select(lyr.1, geometry)
bbox_list <- lapply(d_ESY3_E_ov$geometry, st_bbox) 
# Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=as.integer(d_ESY3_E_ov$lyr.1))

d_ESY3_E <- d_ESY3_E75 %>%
  filter(ESY3=="E")%>%
  dplyr::select(X, Y, id)%>%
  unique()%>%
  arrange(id)%>%
  inner_join(., bbox_df, by="id")%>%
  group_by(id)%>% 
  nest()

bbox_id <- bbox_df %>%
  dplyr::select(xmin,xmax,ymin,ymax)

yE <- list()
for (i in 1:362) {
  ppp_obj <- ppp(d_ESY3_E$data[[i]]$X, d_ESY3_E$data[[i]]$Y, window = owin(c(bbox_id$xmin[i], bbox_id$xmax[i]), c(bbox_id$ymin[i], bbox_id$ymax[i]))
  )
  yE[[i]] <- ppp_obj
}

testE <- map(yE, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))
saveRDS(testE, "testE.rds")

# extract from the output large list the nni values

extracted_values.nni <- list()
for (i in 1:length(testE)) {
  extracted_values.nni[[i]] <- testE[[i]][["statistic"]][["R"]]
}
combined_values.nniE <- unlist(extracted_values.nni)
nni <- combined_values.nniE

nniE <- as.data.frame(nni) %>% cbind(id = d_ESY3_E$id)
saveRDS(nniE, "nniE.rds")

#LEVEL 1 G


idG <- d_ESY3_G75%>% dplyr::select(id)%>% drop_na()


spG <- st_intersects(yGev.sf, d_ESY3_Gs)
resG <- purrr::map_depth(spG, 1, ~ifelse(is.null(.x), NA, .x) )


OV_l <- unlist(resG)

# geometric selection of the grids that overlaied the plots then, transformation in bbox

d_ESY3_G_ov <- cbind(yGev.sf, id=OV_l)%>%drop_na()%>%dplyr::select(lyr.1, geometry)
bbox_list <- lapply(d_ESY3_G_ov$geometry, st_bbox) 
# Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=as.integer(d_ESY3_G_ov$lyr.1))

d_ESY3_G <- d_ESY3_G75 %>%
  filter(ESY3=="G")%>%
  dplyr::select(X, Y, id)%>%
  unique()%>%
arrange(id)%>%
  inner_join(., bbox_df, by="id")%>%
  group_by(id)%>% 
  nest()

bbox_id <- bbox_df %>%
  dplyr::select(xmin,xmax,ymin,ymax)

yG <- list()
for (i in 1:990) {
  ppp_obj <- ppp(d_ESY3_G$data[[i]]$X, d_ESY3_G$data[[i]]$Y, window = owin(c(bbox_id$xmin[i], bbox_id$xmax[i]), c(bbox_id$ymin[i], bbox_id$ymax[i]))
  )
  yG[[i]] <- ppp_obj
}

testG <- map(yG, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))
saveRDS(testG, "testG.rds")

# extract from the output large list the nni values

extracted_values.nni <- list()
for (i in 1:length(testG)) {
  extracted_values.nni[[i]] <- testG[[i]][["statistic"]][["R"]]
}
combined_values.nniG <- unlist(extracted_values.nni)

nni <- combined_values.nniG

nniG <- as.data.frame(nni) %>% cbind(id = d_ESY3_G$id)
saveRDS(nniG, "nniG.rds")







d_syG2$geom <- yG.sf

yG.sf_ow <- data.frame(geom = d_esyG2$geom)%>% st_as_sf()

d_esyG2 <- d_esyG2 %>%  dplyr::select(- geom)

# la parte in cui tolgo i punti fuori

d_esyG2f <- list()
for (i in 1:3) {
    
    d_esyG2.1 <- d_esyG2$data[[i]] %>%st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))
    int<-st_intersects(d_esyG2.1, yG.sf)
    res <- purrr::map_depth(int, 1, ~ifelse(is.null(.x), NA, .x) )
    OV_l <- unlist(res) %>% as.data.frame()
    colnames(OV_l) <- "id"
    d_esyG2.1res <-d_esyG2.1 %>% cbind(OV_l)
    d_esyG2.1 <-d_esyG2$data[[i]] %>% cbind(d_esyG2.1res)%>%drop_na()%>%dplyr::select(X,Y)
    d_esyG2f[[i]] <-  d_esyG2.1
}


pppID <- list()
for (i in 1:3) {
    ppp_obj <- ppp(d_esyG2f[[i]]$X, d_esyG2f[[i]]$Y, window = as.owin(st_geometry(yG.sf_ow [i,])))
    pppID[[i]] <- ppp_obj
}



nniESY2_G <- map(pppID, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))


extracted_values.nni <- list()
for (i in 1:length(nniESY2_G)) {
  extracted_values.nni[[i]] <- nniESY2_G[[i]][["statistic"]][["R"]]
}
combined_values.nniESY2_G <- unlist(extracted_values.nni)

nni2_G <- combined_values.nniESY2_G

nni.ses.2_G <- data.frame(nni=nni2_G)
saveRDS(nni.ses.2_G , "nni.ses.2_G.rds")




d_esyE2 <- d_esyE%>%  dplyr::select(X, Y, ESY2)%>%
  unique()%>%
  drop_na() %>%
  group_by(ESY2)%>% 
  nest()

d_esyE2$geom <- yE.sf

yE.sf_ow <- data.frame(geom = d_esyE2$geom)%>% st_as_sf()

d_esyE2 <- d_esyE2 %>%  dplyr::select(- geom)

d_esyE2f <- list()
for (i in 1:4) {
    
    d_esyE2.1 <- d_esyE2$data[[i]] %>%st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))
    int<-st_intersects(d_esyE2.1, yE.sf)
    res <- purrr::map_depth(int, 1, ~ifelse(is.null(.x), NA, .x) )
    OV_l <- unlist(res) %>% as.data.frame()
    colnames(OV_l) <- "id"
    d_esyE2.1res <-d_esyE2.1 %>% cbind(OV_l)
    d_esyE2.1 <-d_esyE2$data[[i]] %>% cbind(d_esyE2.1res)%>%drop_na()%>%dplyr::select(X,Y)
    d_esyE2f[[i]] <-  d_esyE2.1
}


pppID <- list()
for (i in 1:4) {
    ppp_obj <- ppp(d_esyE2f[[i]]$X, d_esyE2f[[i]]$Y, window = as.owin(st_geometry(yE.sf_ow [i,])))
    pppID[[i]] <- ppp_obj
}



nniESY2_E <- map(pppID, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))


extracted_values.nni <- list()
for (i in 1:length(nniESY2_E)) {
  extracted_values.nni[[i]] <- nniESY2_E[[i]][["statistic"]][["R"]]
}
combined_values.nniESY2_E <- unlist(extracted_values.nni)

nni2_E <- combined_values.nniESY2_E

nni.ses.2_E <- data.frame(nni=nni2_E)
saveRDS(nni.ses.2_E , "nni.ses.2_E.rds")


#LEVEL 1 G


d_esyG3 <- d_esyG%>%  dplyr::select(X, Y, ESY3)%>%
  unique()%>%
  drop_na() %>%
  group_by(ESY3)%>% 
  nest()


#LEVEL 1 E

d_esyE3 <- d_esyE%>%  dplyr::select(X, Y, ESY3)%>%
  unique()%>%
  drop_na() %>%
  group_by(ESY3)%>% 
  nest()

######

d_esyG3.1 <- d_esyG3$data[[1]] %>%st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))
int<-st_intersects(d_esyG3.1, yG.sf)
res <- purrr::map_depth(int, 1, ~ifelse(is.null(.x), NA, .x) )
OV_l <- unlist(res) %>% as.data.frame()
colnames(OV_l) <- "id"
d_esyG3.1res <-d_esyG3.1 %>% cbind(OV_l)
d_esyG3.1 <-d_esyG3$data[[1]] %>% cbind(d_esyG3.1res)%>%drop_na()%>%dplyr::select(X,Y)

pppID <- ppp(d_esyG3.1$X, d_esyG3.1$Y, window = as.owin(st_geometry(yG.sf)))
nniESY3_G <-clarkevans.test(pppID, alternative = 'clustered', correction="cdf")


d_esyE3.1 <- d_esyE3$data[[1]] %>%st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))
int<-st_intersects(d_esyE3.1, yE.sf)
res <- purrr::map_depth(int, 1, ~ifelse(is.null(.x), NA, .x) )
OV_l <- unlist(res) %>% as.data.frame()
colnames(OV_l) <- "id"
d_esyE3.1res <-d_esyE3.1 %>% cbind(OV_l)
d_esyE3.1 <-d_esyE3$data[[1]] %>% cbind(d_esyE3.1res)%>%drop_na()%>%dplyr::select(X,Y)

pppID <- ppp(d_esyE3.1$X, d_esyE3.1$Y, window = as.owin(st_geometry(yE.sf)))
nniESY3_E <- clarkevans.test(pppID, alternative = 'clustered', correction="cdf")

saveRDS(nniESY3_E, "nniESY3_E.rds")
saveRDS(nniESY3_G, "nniESY3_G.rds")

#####################################
#####################################

####LEVEL 2

#LEVEL 2 G

d_ESY2_G1s <- d_ESY3_G75 %>%
  filter(ESY2=="G1")%>%
  dplyr::select(X, Y, id)%>%
  drop_na()%>%
  unique()%>%
  st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))

d_ESY2_G2s <- d_ESY3_G75 %>%
  filter(ESY2=="G2")%>%
  dplyr::select(X, Y, id)%>%
  drop_na()%>%
  unique()%>%
  st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))

d_ESY2_G3s <- d_ESY3_G75 %>%
  filter(ESY2=="G3")%>%
  dplyr::select(X, Y, id)%>%
  drop_na()%>%
  unique()%>%
  st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))


spG1 <- st_intersects(yGev.sf, d_ESY2_G1s)
resG1 <- purrr::map_depth(spG1, 1, ~ifelse(is.null(.x), NA, .x) )


OV_l <- unlist(resG1)

# geometric selection of the grids that overlaied the plots then, transformation in bbox

d_ESY2_G1_ov <- cbind(yGev.sf, id=OV_l)%>%drop_na()%>%dplyr::select(lyr.1, geometry)
bbox_list <- lapply(d_ESY2_G1_ov$geometry, st_bbox) 
# Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=as.integer(d_ESY2_G1_ov$lyr.1))

d_ESY2_G1 <- d_ESY3_G75 %>%
  filter(ESY2=="G1")%>%
  dplyr::select(X, Y, id)%>%
  unique()%>%
arrange(id)%>%
  inner_join(., bbox_df, by="id")%>%
  group_by(id)%>% 
  nest()

bbox_id <- bbox_df %>%
  dplyr::select(xmin,xmax,ymin,ymax)

yG1 <- list()
for (i in 1:634) {
  ppp_obj <- ppp(d_ESY2_G1$data[[i]]$X, d_ESY2_G1$data[[i]]$Y, window = owin(c(bbox_id$xmin[i], bbox_id$xmax[i]), c(bbox_id$ymin[i], bbox_id$ymax[i]))
  )
  yG1[[i]] <- ppp_obj
}

testG1 <- map(yG1, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))


# extract from the output large list the nni values

extracted_values.nni <- list()
for (i in 1:length(testG1)) {
  extracted_values.nni[[i]] <- testG1[[i]][["statistic"]][["R"]]
}
combined_values.nniG1 <- unlist(extracted_values.nni)

nni <- combined_values.nniG1

nniG1 <- as.data.frame(nni) %>% cbind(id = d_ESY2_G1$id)
saveRDS(nniG1, "nniG1.rds")



spG2 <- st_intersects(yGev.sf, d_ESY2_G2s)
resG2 <- purrr::map_depth(spG2, 1, ~ifelse(is.null(.x), NA, .x) )


OV_l <- unlist(resG2)

# geometric selection of the grids that overlaied the plots then, transformation in bbox

d_ESY2_G2_ov <- cbind(yGev.sf, id=OV_l)%>%drop_na()%>%dplyr::select(lyr.1, geometry)
bbox_list <- lapply(d_ESY2_G2_ov$geometry, st_bbox) 
# Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=as.integer(d_ESY2_G2_ov$lyr.1))

d_ESY2_G2 <- d_ESY3_G75 %>%
  filter(ESY2=="G2")%>%
  dplyr::select(X, Y, id)%>%
  unique()%>%
arrange(id)%>%
  inner_join(., bbox_df, by="id")%>%
  group_by(id)%>% 
  nest()

bbox_id <- bbox_df %>%
  dplyr::select(xmin,xmax,ymin,ymax)

yG2 <- list()
for (i in 1:80) {
  ppp_obj <- ppp(d_ESY2_G2$data[[i]]$X, d_ESY2_G2$data[[i]]$Y, window = owin(c(bbox_id$xmin[i], bbox_id$xmax[i]), c(bbox_id$ymin[i], bbox_id$ymax[i]))
  )
  yG2[[i]] <- ppp_obj
}

testG2 <- map(yG2, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))


# extract from the output large list the nni values

extracted_values.nni <- list()
for (i in 1:length(testG2)) {
  extracted_values.nni[[i]] <- testG2[[i]][["statistic"]][["R"]]
}
combined_values.nniG2 <- unlist(extracted_values.nni)

nni <- combined_values.nniG2

nniG2 <- as.data.frame(nni) %>% cbind(id = d_ESY2_G2$id)
saveRDS(nniG2, "nniG2.rds")



spG3 <- st_intersects(yGev.sf, d_ESY2_G3s)
resG3 <- purrr::map_depth(spG3, 1, ~ifelse(is.null(.x), NA, .x) )


OV_l <- unlist(resG3)

# geometric selection of the grids that overlaied the plots then, transformation in bbox

d_ESY2_G3_ov <- cbind(yGev.sf, id=OV_l)%>%drop_na()%>%dplyr::select(lyr.1, geometry)
bbox_list <- lapply(d_ESY2_G3_ov$geometry, st_bbox) 
# Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=as.integer(d_ESY2_G3_ov$lyr.1))

d_ESY2_G3 <- d_ESY3_G75 %>%
  filter(ESY2=="G3")%>%
  dplyr::select(X, Y, id)%>%
  unique()%>%
arrange(id)%>%
  inner_join(., bbox_df, by="id")%>%
  group_by(id)%>% 
  nest()

bbox_id <- bbox_df %>%
  dplyr::select(xmin,xmax,ymin,ymax)

yG3 <- list()
for (i in 1:436) {
  ppp_obj <- ppp(d_ESY2_G3$data[[i]]$X, d_ESY2_G3$data[[i]]$Y, window = owin(c(bbox_id$xmin[i], bbox_id$xmax[i]), c(bbox_id$ymin[i], bbox_id$ymax[i]))
  )
  yG3[[i]] <- ppp_obj
}

testG3 <- map(yG3, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))


# extract from the output large list the nni values

extracted_values.nni <- list()
for (i in 1:length(testG3)) {
  extracted_values.nni[[i]] <- testG3[[i]][["statistic"]][["R"]]
}
combined_values.nniG3 <- unlist(extracted_values.nni)

nni <- combined_values.nniG3

nniG3 <- as.data.frame(nni) %>% cbind(id = d_ESY2_G3$id)
saveRDS(nniG3, "nniG3.rds")


#LEVEL 2 E

d_ESY2_E1s <- d_ESY3_E75 %>%
  filter(ESY2=="E1")%>%
  dplyr::select(X, Y, id)%>%
  drop_na()%>%
  unique()%>%
  st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))

d_ESY2_E2s <- d_ESY3_E75 %>%
  filter(ESY2=="E2")%>%
  dplyr::select(X, Y, id)%>%
  drop_na()%>%
  unique()%>%
  st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))

d_ESY2_E3s <- d_ESY3_E75 %>%
  filter(ESY2=="E3")%>%
  dplyr::select(X, Y, id)%>%
  drop_na()%>%
  unique()%>%
  st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))

d_ESY2_E4s <- d_ESY3_E75 %>%
  filter(ESY2=="E4")%>%
  dplyr::select(X, Y, id)%>%
  drop_na()%>%
  unique()%>%
  st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))


d_ESY2_E5s <- d_ESY3_E75 %>%
  filter(ESY2=="E5")%>%
  dplyr::select(X, Y, id)%>%
  drop_na()%>%
  unique()%>%
  st_as_sf(coords = c("X", "Y"), crs = st_crs(3035))

spE1 <- st_intersects(yEev.sf, d_ESY2_E1s)
resE1 <- purrr::map_depth(spE1, 1, ~ifelse(is.null(.x), NA, .x) )


OV_l <- unlist(resE1)

# geometric selection of the grids that overlaied the plots then, transformation in bbox

d_ESY2_E1_ov <- cbind(yEev.sf, id=OV_l)%>%drop_na()%>%dplyr::select(lyr.1, geometry)
bbox_list <- lapply(d_ESY2_E1_ov$geometry, st_bbox) 
# Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=as.integer(d_ESY2_E1_ov$lyr.1))

d_ESY2_E1 <- d_ESY3_E75 %>%
  filter(ESY2=="E1")%>%
  dplyr::select(X, Y, id)%>%
  unique()%>%
arrange(id)%>%
  inner_join(., bbox_df, by="id")%>%
  group_by(id)%>% 
  nest()

bbox_id <- bbox_df %>%
  dplyr::select(xmin,xmax,ymin,ymax)

yE1 <- list()
for (i in 1:102) {
  ppp_obj <- ppp(d_ESY2_E1$data[[i]]$X, d_ESY2_E1$data[[i]]$Y, window = owin(c(bbox_id$xmin[i], bbox_id$xmax[i]), c(bbox_id$ymin[i], bbox_id$ymax[i]))
  )
  yE1[[i]] <- ppp_obj
}

testE1 <- map(yE1, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))


# extract from the output large list the nni values

extracted_values.nni <- list()
for (i in 1:length(testE1)) {
  extracted_values.nni[[i]] <- testE1[[i]][["statistic"]][["R"]]
}
combined_values.nniE1 <- unlist(extracted_values.nni)

nni <- combined_values.nniE1

nniE1 <- as.data.frame(nni) %>% cbind(id = d_ESY2_E1$id)
saveRDS(nniE1, "nniE1.rds")



spE2 <- st_intersects(yEev.sf, d_ESY2_E2s)
resE2 <- purrr::map_depth(spE2, 1, ~ifelse(is.null(.x), NA, .x) )


OV_l <- unlist(resE2)

# geometric selection of the grids that overlaied the plots then, transformation in bbox

d_ESY2_E2_ov <- cbind(yEev.sf, id=OV_l)%>%drop_na()%>%dplyr::select(lyr.1, geometry)
bbox_list <- lapply(d_ESY2_E2_ov$geometry, st_bbox) 
# Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=as.integer(d_ESY2_E2_ov$lyr.1))

d_ESY2_E2 <- d_ESY3_E75 %>%
  filter(ESY2=="E2")%>%
  dplyr::select(X, Y, id)%>%
  unique()%>%
arrange(id)%>%
  inner_join(., bbox_df, by="id")%>%
  group_by(id)%>% 
  nest()

bbox_id <- bbox_df %>%
  dplyr::select(xmin,xmax,ymin,ymax)

yE2 <- list()
for (i in 1:176) {
  ppp_obj <- ppp(d_ESY2_E2$data[[i]]$X, d_ESY2_E2$data[[i]]$Y, window = owin(c(bbox_id$xmin[i], bbox_id$xmax[i]), c(bbox_id$ymin[i], bbox_id$ymax[i]))
  )
  yE2[[i]] <- ppp_obj
}

testE2 <- map(yE2, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))


# extract from the output large list the nni values

extracted_values.nni <- list()
for (i in 1:length(testE2)) {
  extracted_values.nni[[i]] <- testE2[[i]][["statistic"]][["R"]]
}
combined_values.nniE2 <- unlist(extracted_values.nni)

nni <- combined_values.nniE2

nniE2 <- as.data.frame(nni) %>% cbind(id = d_ESY2_E2$id)
saveRDS(nniE2, "nniE2.rds")



spE3 <- st_intersects(yEev.sf, d_ESY2_E3s)
resE3 <- purrr::map_depth(spE3, 1, ~ifelse(is.null(.x), NA, .x) )


OV_l <- unlist(resE3)

# geometric selection of the grids that overlaied the plots then, transformation in bbox

d_ESY2_E3_ov <- cbind(yEev.sf, id=OV_l)%>%drop_na()%>%dplyr::select(lyr.1, geometry)
bbox_list <- lapply(d_ESY2_E3_ov$geometry, st_bbox) 
# Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=as.integer(d_ESY2_E3_ov$lyr.1))

d_ESY2_E3 <- d_ESY3_E75 %>%
  filter(ESY2=="E3")%>%
  dplyr::select(X, Y, id)%>%
  unique()%>%
arrange(id)%>%
  inner_join(., bbox_df, by="id")%>%
  group_by(id)%>% 
  nest()

bbox_id <- bbox_df %>%
  dplyr::select(xmin,xmax,ymin,ymax)

yE3 <- list()
for (i in 1:110) {
  ppp_obj <- ppp(d_ESY2_E3$data[[i]]$X, d_ESY2_E3$data[[i]]$Y, window = owin(c(bbox_id$xmin[i], bbox_id$xmax[i]), c(bbox_id$ymin[i], bbox_id$ymax[i]))
  )
  yE3[[i]] <- ppp_obj
}

testE3 <- map(yE3, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))


# extract from the output large list the nni values

extracted_values.nni <- list()
for (i in 1:length(testE3)) {
  extracted_values.nni[[i]] <- testE3[[i]][["statistic"]][["R"]]
}
combined_values.nniE3 <- unlist(extracted_values.nni)

nni <- combined_values.nniE3

nniE3 <- as.data.frame(nni) %>% cbind(id = d_ESY2_E3$id)
saveRDS(nniE3, "nniE3.rds")




spE4 <- st_intersects(yEev.sf, d_ESY2_E4s)
resE4 <- purrr::map_depth(spE4, 1, ~ifelse(is.null(.x), NA, .x) )


OV_l <- unlist(resE4)

# geometric selection of the grids that overlaied the plots then, transformation in bbox

d_ESY2_E4_ov <- cbind(yEev.sf, id=OV_l)%>%drop_na()%>%dplyr::select(lyr.1, geometry)
bbox_list <- lapply(d_ESY2_E4_ov$geometry, st_bbox) 
# Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=as.integer(d_ESY2_E4_ov$lyr.1))

d_ESY2_E4 <- d_ESY3_E75 %>%
  filter(ESY2=="E4")%>%
  dplyr::select(X, Y, id)%>%
  unique()%>%
arrange(id)%>%
  inner_join(., bbox_df, by="id")%>%
  group_by(id)%>% 
  nest()

bbox_id <- bbox_df %>%
  dplyr::select(xmin,xmax,ymin,ymax)

yE4 <- list()
for (i in 1:32) {
  ppp_obj <- ppp(d_ESY2_E4$data[[i]]$X, d_ESY2_E4$data[[i]]$Y, window = owin(c(bbox_id$xmin[i], bbox_id$xmax[i]), c(bbox_id$ymin[i], bbox_id$ymax[i]))
  )
  yE4[[i]] <- ppp_obj
}

testE4 <- map(yE4, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))


# extract from the output large list the nni values

extracted_values.nni <- list()
for (i in 1:length(testE4)) {
  extracted_values.nni[[i]] <- testE4[[i]][["statistic"]][["R"]]
}
combined_values.nniE4 <- unlist(extracted_values.nni)

nni <- combined_values.nniE4

nniE4 <- as.data.frame(nni) %>% cbind(id = d_ESY2_E4$id)
saveRDS(nniE4, "nniE4.rds")



spE5 <- st_intersects(yEev.sf, d_ESY2_E5s)
resE5 <- purrr::map_depth(spE5, 1, ~ifelse(is.null(.x), NA, .x) )


OV_l <- unlist(resE5)

# geometric selection of the grids that overlaied the plots then, transformation in bbox

d_ESY2_E5_ov <- cbind(yEev.sf, id=OV_l)%>%drop_na()%>%dplyr::select(lyr.1, geometry)
bbox_list <- lapply(d_ESY2_E5_ov$geometry, st_bbox) 
# Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=as.integer(d_ESY2_E5_ov$lyr.1))

d_ESY2_E5 <- d_ESY3_E75 %>%
  filter(ESY2=="E5")%>%
  dplyr::select(X, Y, id)%>%
  unique()%>%
arrange(id)%>%
  inner_join(., bbox_df, by="id")%>%
  group_by(id)%>% 
  nest()

bbox_id <- bbox_df %>%
  dplyr::select(xmin,xmax,ymin,ymax)

yE5 <- list()
for (i in 1:39) {
  ppp_obj <- ppp(d_ESY2_E5$data[[i]]$X, d_ESY2_E5$data[[i]]$Y, window = owin(c(bbox_id$xmin[i], bbox_id$xmax[i]), c(bbox_id$ymin[i], bbox_id$ymax[i]))
  )
  yE5[[i]] <- ppp_obj
}

testE5 <- map(yE5, ~ clarkevans.test(.x, alternative = 'clustered', correction="cdf"))


# extract from the output large list the nni values

extracted_values.nni <- list()
for (i in 1:length(testE5)) {
  extracted_values.nni[[i]] <- testE5[[i]][["statistic"]][["R"]]
}
combined_values.nniE5 <- unlist(extracted_values.nni)

nni <- combined_values.nniE5

nniE5 <- as.data.frame(nni) %>% cbind(id = d_ESY2_E5$id)
saveRDS(nniE5, "nniE5.rds")
